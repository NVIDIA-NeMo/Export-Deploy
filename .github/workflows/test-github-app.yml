name: Push hello.md

on:
  push:

jobs:
  push-hello:
    runs-on: ubuntu-latest
    environment: main
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.BOT_ID }}
          private-key: ${{ secrets.BOT_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ko3n1g/chore/test-app-protected
          token: ${{ steps.app-token.outputs.token }}

      - name: Install GPG
        run: sudo apt-get install -y gnupg2

      - name: Import GPG key (for signing)
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        id: gpg-action
        with:
          gpg_private_key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PWD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Create hello.md
        run: echo "$(uuidgen)" > hello.md

      - name: Create tmp branch and push
        run: |
          TMP_BRANCH="pull-request/$(shuf -i 1000000000-9999999999 -n 1)"
          git checkout -b "$TMP_BRANCH"
          git add hello.md
          git commit -sS -m "Add hello.md from workflow" || echo "No changes to commit"
          git push -u origin "$TMP_BRANCH"
          echo "TMP_BRANCH=$TMP_BRANCH" | tee -a $GITHUB_ENV

      - name: Wait for status checks on tmp branch
        uses: actions/github-script@v7
        id: wait-status
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const branch = process.env.TMP_BRANCH;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = `refs/heads/${branch}`;
            let checksPassed = false;
            let maxAttempts = 30;
            let attempt = 0;
            const delay = ms => new Promise(res => setTimeout(res, ms));
            while (!checksPassed && attempt < maxAttempts) {
              attempt++;
              // Get combined status for the ref
              const { data: status } = await github.repos.getCombinedStatusForRef({
                owner,
                repo,
                ref,
              });
              // Get check runs for the ref
              const { data: checks } = await github.checks.listForRef({
                owner,
                repo,
                ref,
              });
              const allStatuses = status.statuses;
              const allChecks = checks.check_runs;
              // If there are no checks or statuses, wait
              if (allStatuses.length === 0 && allChecks.length === 0) {
                await delay(10000);
                continue;
              }
              // All statuses must be 'success'
              const statusesOk = allStatuses.every(s => s.state === 'success');
              // All check runs must be 'completed' and 'success'
              const checksOk = allChecks.every(c => c.status === 'completed' && c.conclusion === 'success');
              if (statusesOk && checksOk) {
                checksPassed = true;
                break;
              }
              await delay(10000);
            }
            if (!checksPassed) {
              core.setFailed('Status checks did not pass in time');
            }

      - name: Commit and push hello.md
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ko3n1g/chore/test-app-protected
          git checkout ko3n1g/chore/test-app-protected
          git merge ${{ env.TMP_BRANCH }}
          git push origin ko3n1g/chore/test-app-protected
