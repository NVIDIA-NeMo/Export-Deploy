# Copyright (c) 2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow verifies that the basic install works across all supported platforms.
# For basic install, all imports need to either be successful or appropriately guarded.

name: Installation Test

on:
  push:
    branches:
      - main
      - "pull-request/[0-9]+"
      - "deploy-release/*"

env:
  UV_PROJECT_ENVIRONMENT: "./venv"

jobs:
  pre-flight:
    uses: NVIDIA-NeMo/FW-CI-templates/.github/workflows/_cicd_preflight.yml@v0.53.0

  pip-test-cuda:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: linux-amd64-cpu16
    name: Pip - Python${{ matrix.python-version }}${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }} - AMD64/Linux - NGC CUDA
    container:
      image: nvcr.io/nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04
    environment: nemo-ci
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        extra-groups: ["", "trtllm", "vllm", "trt-onnx"]
    env:
      EXTRA: ${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set PATH
        run: |
          echo "UV_PROJECT_ENVIRONMENT=/opt/venv" | tee -a "$GITHUB_ENV"
          echo "UV_LINK_MODE=copy" | tee -a "$GITHUB_ENV"
          echo "CUDA_HOME=/usr/local/cuda" | tee -a "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" | tee -a "$GITHUB_ENV"
          echo "PATH=$HOME/.local/bin:$PATH:$CUDA_HOME/bin" | tee -a "$GITHUB_ENV"
          echo "TORCH_CUDA_ARCH_LIST=6.0;6.1;7.0;7.5;8.0;8.6;9.0" | tee -a "$GITHUB_ENV"

      - name: Install nemo-export-deploy${{ matrix.extra-groups != '' && format('[{0}]', matrix.extra-groups) || '' }}
        shell: bash -x -e -u -o pipefail {0}
        run: |
          if [[ -n "${EXTRA}" ]]; then
            FRAMEWORK=("--inference-framework" "$EXTRA")
          else
            FRAMEWORK=("--inference-framework" "inframework")
          fi

          bash docker/common/install.sh --base-image cuda --python-version 3.12 "${FRAMEWORK[@]}"

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for nemo_deploy
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: nemo_deploy
          python-binary: ${{ env.UV_PROJECT_ENVIRONMENT }}/bin/python

      - name: Check imports for nemo_export
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: nemo_export
          python-binary: ${{ env.UV_PROJECT_ENVIRONMENT }}/bin/python

  uv-test-cuda:
    needs: [pre-flight]
    if: |
      !(needs.pre-flight.outputs.docs_only == 'true'
      || needs.pre-flight.outputs.is_deployment_workflow == 'true')
    runs-on: linux-amd64-cpu16
    name: UV - AMD64/Linux - NGC ${{ contains(matrix.image, 'cuda') && 'CUDA' || 'PyTorch' }}
    container:
      image: ${{ matrix.image }}
    environment: nemo-ci
    strategy:
      fail-fast: false
      matrix:
        image: ["nvcr.io/nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04", "nvcr.io/nvidia/pytorch:25.05-py3"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install project
        env:
          PAT: ${{ secrets.PAT }}
          BASE_IMAGE: ${{ contains(matrix.image, 'cuda') && 'cuda' || 'pytorch' }}
        shell: bash
        run: |
          echo -e "machine github.com\n  login token\n  password ${{ secrets.PAT }}" > ~/.netrc
          chmod 600 ~/.netrc 

          export PATH="$HOME/.local/bin:$PATH"
          export UV_PROJECT_ENVIRONMENT=/opt/venv
          export PATH="$UV_PROJECT_ENVIRONMENT/bin:$PATH"
          export UV_LINK_MODE=copy
          export CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"

          bash docker/common/install.sh \
            --base-image $BASE_IMAGE \
            --inference-framework inframework

          uv run python -m ensurepip --upgrade
          ln -sf /opt/venv/bin/pip3 /opt/venv/bin/pip
          uv pip install --no-deps -e .

      - name: Checkout check-imports
        uses: actions/checkout@v4
        with:
          repository: NVIDIA-NeMo/FW-CI-templates
          ref: v0.39.0
          path: FW-CI-templates

      - name: Check imports for nemo_deploy
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: nemo_deploy
          python-binary: /opt/venv/bin/python

      - name: Check imports for nemo_export
        uses: ./FW-CI-templates/.github/actions/check-imports
        with:
          package-name: nemo_export
          python-binary: /opt/venv/bin/python

  install-test-summary:
    needs: [pre-flight, uv-test-cuda, pip-test-cuda]
    runs-on: ubuntu-latest
    name: Install test summary
    if: |
      (
        needs.pre-flight.outputs.docs_only == 'true'
        || needs.pre-flight.outputs.is_deployment_workflow == 'true'
        || success()
      )
      && !cancelled()
    steps:
      - name: Result
        run: echo Install check successful
